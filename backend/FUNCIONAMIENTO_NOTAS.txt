---------------------------------------------------
          BACKEND CON NOJEJS / EXPRESS / MYSQL
---------------------------------------------------
A) CREACIÓN DE USUARIO Y DATABASE EN MYSQL 

1. Levantar y acceder a la base de datos Mysql y acceder como usuario root.

2. Dentro de la carpeta backend/src/db/ se encuentra el archivo mysql_initial_setup.txt,
el cual continene las sentencias SQL básicas y necesarias a ejecutar en la 
base de datos mysql, previo a la utilización del ORM por parte de sequelize 
del lado del servidor nodejs.

B) PARA INICIALIZAR EL SERVIDOR DE NODEJS

1. En una línea de comandos ingresar a la carpeta raiz de prueba-tecnica-web/backend/

2. Ejecutar el comando: npm install

*El comando anterior permite recuperar la carpeta de node_modules con todas 
las dependencias necesarias para el servidor de nodejs.

NOTA: Si existieran problemas con la importación de algunas dependencias dev, 
desde la línea de comandos entrar a la carpeta raíz de prueba-tecnica-web/backend/
y ejecutar: 

npm i @babel/core @babel/node @babel/preset-env colors morgan nodemon -D

-------------------------------------------------------------------------------------
3. Caso adicional
NOTA: Si desea es posible también generar registros random para poblar la tabla products 
desde un inicio, para ello se recomienda instalar el paquete de desarrollo fakerjs 
desde la línea de comando de nodejs de la siguiente forma:

npm install @faker-js/faker --save-dev

Luego solamente se descomenta la siguiente utilidad en el archivo app.js:

import { generate_random_products } from "./utils/initialProductSetup"

y también se descomenta en el archivo app.js la ejecución de la función: 

generate_random_products()

*La tabla products cuenta con un campo "name" con atributo unique, por lo que si la 
dependencia faker trata de generar un nombre random que ya existe en la tabla, la
base de datos mostrará un error en la línea de comandos del servidor nodejs.

En ese caso simplemente se cancela el servidor nodejs usando Ctrl+C y se vuelve a ejecutar 
con:

npm run dev

Con eso ya debería mostrar un mensaje en la línea de comandos: 

"5 registros aleatorios generados con éxito".

*Sin embargo tambíen es posible crear los productos uno a uno desde
la interfáz de usuario.

------------------------------------------------------------------------------------------
C) DEPENDENCIAS PARA EL SERVIDOR

El servidor backend funciona con las siguientes dependencias:

  "dependencies": {
    "bcryptjs": "2.4.3",
    "body-parser": "1.20.3",
    "cookie-parser": "1.4.7",
    "cors": "2.8.5",
    "express": "4.21.2",
    "express-validator": "7.2.1",
    "jsonwebtoken": "9.0.2",
    "mysql2": "3.12.0",
    "path": "0.12.7",
    "sequelize": "6.37.5"
  },

Por motivos de desarrollo, el servidor backend funciona con las siguientes
dependencias dev:

  "devDependencies": {
    "@babel/core": "7.26.7",
    "@babel/node": "7.26.0",
    "@babel/preset-env": "7.26.7",
    "@faker-js/faker": "9.4.0",
    "colors": "1.4.0",
    "morgan": "1.10.0",
    "nodemon": "3.1.9"
  }

